// üß™ Teste espec√≠fico para gera√ß√£o de relat√≥rios
const axios = require('axios');

const BASE_URL = 'https://zapinteligencia-vs1-ajp5sd642-joaos-projects-63a6991f.vercel.app';

async function testReports() {
    console.log('üìä Testando gera√ß√£o de relat√≥rios...\n');

    try {
        // Teste 1: Verificar se o site est√° acess√≠vel
        console.log('1Ô∏è‚É£ Testando acesso b√°sico...');
        try {
            const response = await axios.get(BASE_URL, { 
                timeout: 10000,
                validateStatus: function (status) {
                    return status < 500;
                }
            });
            console.log('‚úÖ Acesso b√°sico:', response.status);
        } catch (error) {
            console.log('‚ùå Erro de acesso:', error.response?.status || error.message);
            return;
        }

        // Teste 2: Verificar status dos dados
        console.log('\n2Ô∏è‚É£ Verificando status dos dados...');
        try {
            const response = await axios.get(`${BASE_URL}/data_status`, { timeout: 10000 });
            console.log('‚úÖ Status dos dados:', {
                data_loaded: response.data.data_loaded,
                message: response.data.message,
                orders_count: response.data.orders_count,
                customers_count: response.data.customers_count
            });
        } catch (error) {
            console.log('‚ùå Erro no status:', error.response?.status || error.message);
        }

        // Teste 3: Verificar arquivos dispon√≠veis
        console.log('\n3Ô∏è‚É£ Verificando arquivos dispon√≠veis...');
        try {
            const response = await axios.get(`${BASE_URL}/check_files`, { timeout: 10000 });
            console.log('‚úÖ Arquivos dispon√≠veis:', response.data);
        } catch (error) {
            console.log('‚ùå Erro nos arquivos:', error.response?.status || error.message);
        }

        // Teste 4: Gerar relat√≥rios
        console.log('\n4Ô∏è‚É£ Testando gera√ß√£o de relat√≥rios...');
        try {
            const response = await axios.post(`${BASE_URL}/generate_reports`, {}, { 
                timeout: 15000,
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ Relat√≥rios gerados:', {
                success: response.data.success,
                message: response.data.message,
                reports_count: response.data.reports?.length || 0,
                reports: response.data.reports?.map(r => r.name) || []
            });
        } catch (error) {
            console.log('‚ùå Erro na gera√ß√£o:', {
                status: error.response?.status,
                message: error.response?.data?.error || error.message
            });
        }

        // Teste 5: Verificar relat√≥rio espec√≠fico
        console.log('\n5Ô∏è‚É£ Testando visualiza√ß√£o de relat√≥rio...');
        try {
            const response = await axios.get(`${BASE_URL}/view_report/relatorio_vendas.xlsx`, { timeout: 10000 });
            console.log('‚úÖ Relat√≥rio visualizado:', {
                success: response.data.success,
                filename: response.data.filename,
                name: response.data.name,
                html_length: response.data.html?.length || 0
            });
        } catch (error) {
            console.log('‚ùå Erro na visualiza√ß√£o:', {
                status: error.response?.status,
                message: error.response?.data?.error || error.message
            });
        }

        console.log('\nüéØ Resumo:');
        console.log('- Se o teste 4 falhou: Problema na gera√ß√£o de relat√≥rios');
        console.log('- Se o teste 5 falhou: Problema na visualiza√ß√£o');
        console.log('- Se ambos funcionaram: Relat√≥rios est√£o OK');

    } catch (error) {
        console.error('‚ùå Erro geral:', error.message);
    }
}

// Executar teste
testReports();
